@startuml

!define ENTITY class
!define DAO interface
!define IMPL class

class Book{
  - isbn: String
  - title: String
  - author: String
  - status: BookStatus
  - borrower: Borrower
  + Book(isbn: String, title: String, author: String)
  + getIsbn(): String
  + setIsbn(isbn: String): void
  + getStatus(): BookStatus
  + setStatus(status: BookStatus): void
  + getAuthor(): String
  + setAuthor(author: String): void
  + getTitle(): String
  + setTitle(title: String): void
  + getBorrower(): Borrower
  + setBorrower(): void
}

class Borrower {
  - name: String
  - memberId: String
  + Borrower(name: String, memberId: String)
  + Borrower(name: String)
  + getName(): String
  + getMemberId(): String
  + setMemberId(id: int): void
  + setName(name: String): String
}

class BorrowerBook {
        - isbn: String
        - idBorrower: int
        - borrow_start: Date
        - borrow_end: Date

        + getIsbn(): String
        + setIsbn(isbn: String): void
        + getIdBorrower(): int
        + setIdBorrower(idBorrower: int): void
        + getBorrow_start(): Date
        + setBorrow_start(borrow_start: Date): void
        + getBorrow_end(): Date
        + setBorrow_end(borrow_end: Date): void

        + BorrowerBook(isbn: String, idBorrower: int, borrow_start: Date, borrow_end: Date)
    }

interface BookDAO {
    + create(book: Book): bool
    + update(book: Book): bool
    + deleteByIsbn(isbn: String): bool
    + getByIsbn(isbn: String): Book
    + getByAuthor(author: String): List<Book>
    + getAll(): List<Book>
    + returnBook(isbn : String): boolean
}

interface BorrowerDAO {
    + create(borrower: Borrower): bool
    + updateById(borrower: Borrower): bool
    + deleteById(id: int): bool
    + getById(id: int): Borrower
}

interface PivoteDAO {
    + create(isbn: String, id: int): bool
    + deleteBook(isbn: String): bool
    + delete(isbn: String, id: int): bool
    + getByIsbn(isbn: string): List<int>
    + getById(id: int): List<String>
    + deleteOne(id: int, isbn: string): boolean
}

class BookDAOImpl {
    + create(book: Book): bool
    + update(book: Book): bool
    + deleteByIsbn(isbn: string): bool
    + getByIsbn(isbn: String): Book
    + getByAuthor(author: String): List<Book>
    + getAll(): List<Book>
    + returnBook(isbn : String): boolean
}

class BorrowerDAOImpl {
    + create(borrower: Borrower): bool
    + updateById(borrower: Borrower): bool
    + deleteById(id: int): bool
    + getById(id: int): Borrower
}

class PivoteDAOImpl {
    + create(isbn: String, id: int): bool
    + deleteBook(isbn: String): bool
    + delete(isbn: String, id: int): bool
    + getByIsbn(isbn: string): BorrowBook
    + getById(id: int): List<BorrowBook>
}

class ConnectionJDBC{
   - {static} String HOST
   - {static} String USER
   - {static} String PASS
   - {static} Connection connection
   - ConnectionJDBC()
   + getConnection(): Connection

}

class Manager {
  - books: List<Book>
  + Manager()
  + addBook(book: Book): void
  + showBooks(): void
  + searchBooksByISBN(isbn: String): Book
  + searchBookBYAuthor(author: String)
  + borrowBook(isbn: String, borrowerID: int): boolean
  + returnBook(isbn: String): boolean
  + getBorrowedBooks(): List<Book>
  + removeBook(isbn: String): boolean
  + showStats(): void
}

enum BookStatus {
  AVAILABLE
  BORROWED
  LOST
}

Manager --> BookDAOImpl
Manager --> BorrowerDAOImpl
Manager --> PivoteDAOImpl
BookDAO <|-- BookDAOImpl
BookDAOImpl --o ConnectionJDBC
BorrowerDAO <|-- BorrowerDAOImpl
BorrowerDAOImpl --o ConnectionJDBC
Book -- BorrowerBook
BorrowerBook -- Borrower
PivoteDAOImpl --|> PivoteDAO
@enduml